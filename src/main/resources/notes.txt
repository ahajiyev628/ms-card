1. Bean - a. A bean is a specific type of object that is managed by the Spring framework.
             Beans are created, configured, and managed by the Spring IoC (Inversion of Control) container.
             Beans in Spring have additional metadata, such as lifecycle management and scope, which are not typically associated with regular objects.
          b. For a class to participate in Spring's dependency injection mechanism, it must be defined as a bean.

How to create Bean

2. Dependency Injection - allows for loose coupling between components by injecting dependencies rather than creating them directly.
   Types of Dependency Injection:
        a. Constructor Injection - involves passing dependencies through a class constructor.
                                   This ensures that the dependency is provided at the time of object creation,
                                   making the object immutable and easier to test.
        b. Setter Injection      - uses setter methods to inject dependencies.
                                   This provides the flexibility to inject dependencies after the object is created.
        c. Field Injection (@Autowired) - directly injects dependencies into the class fields.
                                          itâ€™s generally discouraged because :
                                                a. Testing Challenges: Field injection makes it harder to write unit tests.
                                                                       Since the dependencies are injected directly into private fields,
                                                                       it's not straightforward to create mocks or stubs for these dependencies in tests.
                                                                       Full application will be raised while applying the testing.
                                                b. Lack of Immutability: Field injection doesn't allow you to make dependencies final,
                                                                         which means the class cannot enforce immutability and can be modified outside easily.

4. Bean Scopes - define the lifecycle and visibility of a bean within the context of the Spring container. (how and when the bean instances are created and shared)
   Types of Bean Scopes:
        a. Singleton (default)  - a single instance of the bean is created and shared across the entire Spring container.
                                  it should be used when you need to maintain a shared state or a shared resource, such as a connection pool or a service.
        b. Prototype   - a new instance of the bean is created every time it is requested from the container.
                         it should be used when you need a new instance for each use, such as for non-thread-safe objects or objects with unique state per usage.
        c. Request     - a new instance of the bean is created for each HTTP request.
                         Useful for web applications where a bean is needed for each HTTP request, such as request-scoped services or controllers.
        d. Session     - a new instance of the bean is created for each HTTP session.
                         it should be used when you need to maintain a bean instance across multiple HTTP requests within the same session, such as user-specific data or preferences.
        e. Application - a single instance of the bean is created for the lifecycle of a ServletContext.
                         it should be used when you need a singleton bean that is scoped to the lifecycle of a web application, such as shared resources across the entire application.
        f. WebSocket   - a new instance of the bean is created for the lifecycle of a WebSocket session.
                         Useful for WebSocket applications where you need a bean instance per WebSocket session.

5. @SpringBootApplication - serves as a convenience annotation to combine several other annotations into one:
    a. @SpringBootConfiguration: A specialized @Configuration for Spring Boot applications, marking the class as a source of bean definitions.
    b. @EnableAutoConfiguration: Automatically configures the Spring application context based on the dependencies on the classpath.
    c. @ComponentScan:           Scans the specified package(s) for Spring components and registers them in the application context.

6. HTTP methods:
    Idempotent Methods: GET, PUT, DELETE
    Non-Idempotent Methods: POST, (sometimes PATCH)

    Idempotence - refers to the property of an operation where performing it multiple times has the same effect as performing it once

7. @RequestBody  - is used to bind the HTTP request body to a method parameter in a controller.
                   It is typically used in POST, PUT, and PATCH requests to transfer the request payload to the backend.
   @RequestParam - is used to bind a request parameter (query parameter) to a method parameter in a controller o pass simple data types (e.g., strings, numbers) as part of the URL query string.
                   It can be used with any HTTP method.
   @PathVariable - is used to bind a URI template variable to a method parameter in a controller.
                   It is typically used in RESTful services to capture parts of the URL when you want to extract a value from the URI path and bind it to a method parameter.

8. Logging - Logs should not store any sensitive data.

9. Lombok - a popular Java library that aims to reduce boilerplate code.
   @SneakyThrows - can be applied to methods or constructors.
                   When the method throws a checked exception, Lombok will wrap it in a runtime exception and then sneak it through, effectively bypassing Java's checked exception mechanism.



ORM is used to map the objects to database table
Object Card(card_number, cvv) -> cards table

The only drawback of ORM over Native sql is latency because the java code is converted to sql by ORM.

ORM (1. Jav code, 2. sql) (Hibernate) / Native SQL (1. direct sql)
JPA - Specification

>>> What is DTO pattern ?

>>> What is the difference between orElse(null) and orElseGet(null) ?
read also orElseThrow().

>>> What are the strategies of @GeneratedValue annotation ?

>> Repository interface types

>>> What is the characteristics of Entity class (in which cases @Entity annotation can be used) ?

>>> Two tables are created by Liquibase - databasechangelog and databasechangeloglock
databasechangelog stores the information when the query executed. It has a column md5sum which generates a unique id.
when something is changed in changelog files, it will throw error because md5sum ids will not match.


>>> Three interfaces for Repository...

>>> @Repository annotation can handle SQL Exception

>>> Communication between microservices - REST, Queue (MessageBrocker).
Feign, RestTemplate, WebClient, HTTPClient

>> Spring Get queryni bir nece defe atdiqda daha tez response verir - Caching

>> Microservisler arasi elaqe - Rest, Queue (message brocker), Websocket.

Rest: Feign, RestTemplate

>> Hibernate entity lifecycle

>> Isolation level


>> Relations
@MapsId onetoone da ishlenir.
MappedBy root terefde olur.
Joincolumn komekci cedvel terefde olur.
fetch, cascade bax.
@ToString.Exclude bax.
bidirectional vs unidirectional.

one solution for n+1 is JPQL (not recommented) : @Query (---JOIN FETCH----)
2nd with graph structure: @EntityGraph
FETCH ve LOAD TYPE bax.


Cascade - parent-a ne edirsense child-a da et. TYpe-lar enum-di.
PERSIST is recommended.